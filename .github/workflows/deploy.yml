name: Deploy Ghost Blog

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e

            # Create directory if not exists
            mkdir -p ~/ghost-blog
            cd ~/ghost-blog

            # Clone or pull repository
            if [ ! -d .git ]; then
              git clone git@github.com:${{ github.repository }} .
            else
              # Backup content directory
              mv content content.backup 2>/dev/null || true
              
              # Reset any local changes and pull latest
              git reset --hard HEAD
              git clean -fd
              git pull origin main
              
              # Restore content directory
              if [ -d content.backup ]; then
                rm -rf content
                mv content.backup content
              fi
            fi

            # Create .env file
            cat > .env << EOL
            DOMAIN=${{ secrets.DOMAIN }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            URL=https://${{ secrets.DOMAIN }}
            MAIL_FROM=${{ secrets.MAIL_FROM }}
            EOL

            # Update nginx configuration
            sudo cp nginx/ghost.conf /etc/nginx/sites-available/ghost
            sudo sed -i "s|{{DOMAIN}}|${{ secrets.DOMAIN }}|g" /etc/nginx/sites-available/ghost
            sudo ln -sf /etc/nginx/sites-available/ghost /etc/nginx/sites-enabled/
            sudo nginx -t && sudo systemctl reload nginx

            # Deploy with docker compose
            docker compose down || true
            docker compose pull
            docker compose up -d

            # Setup SSL if not already done
            if ! sudo test -d "/etc/letsencrypt/live/${{ secrets.DOMAIN }}"; then
              sudo certbot --nginx --non-interactive --agree-tos \
                -m ${{ secrets.ADMIN_EMAIL }} -d ${{ secrets.DOMAIN }}
            fi
            
            # Wait for Ghost to be ready
            echo "Waiting for Ghost to start..."
            sleep 30
            
            # Health check - test for redirect loops
            echo "Running health checks..."
            
            # Test 1: Check if Ghost is responding on localhost
            if curl -f -s -o /dev/null -w "%{http_code}" http://localhost:2368 | grep -q "200\|301\|302"; then
              echo "✓ Ghost is responding on localhost:2368"
            else
              echo "✗ Ghost is not responding on localhost:2368"
              docker compose logs --tail=50 ghost
              exit 1
            fi
            
            # Test 2: Check for redirect loops on the domain
            REDIRECT_COUNT=$(curl -s -o /dev/null -w "%{redirect_url}" -L --max-redirs 5 https://${{ secrets.DOMAIN }} 2>&1 | grep -c "maximum redirects" || true)
            if [ "$REDIRECT_COUNT" -gt 0 ]; then
              echo "✗ Redirect loop detected on https://${{ secrets.DOMAIN }}"
              echo "Nginx config:"
              cat /etc/nginx/sites-enabled/ghost
              echo ""
              echo "Ghost environment:"
              docker compose exec ghost env | grep -E "url|URL" || true
              exit 1
            else
              echo "✓ No redirect loops detected"
            fi
            
            # Test 3: Final health check
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -L https://${{ secrets.DOMAIN }} || echo "000")
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✓ Site is accessible at https://${{ secrets.DOMAIN }} (HTTP $HTTP_STATUS)"
            else
              echo "✗ Site returned HTTP $HTTP_STATUS"
              echo "Testing with curl -I:"
              curl -I https://${{ secrets.DOMAIN }} || true
              exit 1
            fi
            
            echo "✓ All health checks passed!"
